name: Build and Deploy Fast

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: 5432
      DATABASE_NAME: fastapi
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      SECRET_KEY: hello
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: fastapi_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3
      - name: say hi
        run: echo "chicks"
      - name: install python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: install and run pytest
        run: |
          pip install pytest
          pytest
      # - name: docker login
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      # - name: docker build x
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1
      # - name: build and push docker image
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{steps:buildx.outputs.name}}
      #     push: true
      #     tags: ${{secrets.DOCKER_HUB_USERNAME}}/fastapiv1:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{steps:docker_build.outputs.digest}}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3
      - name: deploy to heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

# on:
#   push:
#     branches:
#       - 'main'
#   pull_request:
#     branches:
#       - 'test_branch'
